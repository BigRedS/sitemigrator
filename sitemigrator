#! /usr/bin/perl

use strict;
use 5.010;

use YAML qw/LoadFile/;
use Data::Dumper;
use Getopt::Std;

my %opts;
# -c config file
# -d print config and exit
# -e execute commands
# -f file listing sites to migrate
# -h Halp!
# -l Path to a list of sites to sync
# -m do mysql only
# -r do rsync only
# -s do one site only

my $cmdline = join(" ", @ARGV);

getopts('c:defhql:o:mrs:', \%opts);
if(defined($opts{'h'})){
	print usage();
	exit 0;
}

my $f_conf = $opts{'c'} || './sitemigrator.yaml';

my ($conf, $sites);
if(-f $f_conf){
	$conf = LoadFile($f_conf);
	$sites = $conf->{'sites'};
	_info("Parsed config file '$f_conf'");
}else{
	_warn("Config file '$f_conf' doesn't exist");
	$opts{'d'} = "1";
}


# Deal with some defaults:

$conf->{'rsync'}->{'binary'}    = $conf->{'rsync'}->{'binary'}    || '/usr/bin/rsync';
$conf->{'rsync'}->{'user'}      = $conf->{'rsync'}->{'user'}      || 'root';
$conf->{'rsync'}->{'key'}       = $conf->{'rsync'}->{'key'}       || '/root/.ssh/id_rsa.pub';
$conf->{'rsync'}->{'options'}   = $conf->{'rsync'}->{'options'}   || '-az';
$conf->{'rsync'}->{'parentdir'} = $conf->{'rsync'}->{'parentdir'} || '/home/';

$conf->{'mysql'}->{'mysqldump'} = $conf->{'mysql'}->{'mysqldump'} || '/usr/bin/mysqldump';
$conf->{'mysql'}->{'binary'}    = $conf->{'mysql'}->{'binary'}    || '/usr/bin/mysql';
$conf->{'mysql'}->{'port'}      = $conf->{'mysql'}->{'port'}      || '3306';
$conf->{'mysql'}->{'dumpdir'}   = $conf->{'mysql'}->{'dumpdir'}   || '/tmp/';
$conf->{'mysql'}->{'umask'}     = $conf->{'mysql'}->{'umask'}     || '077'; # sets 700 permissions by default

# Anything that can be checked this early on should be:
_warn("rsync binary '$conf->{'rsync'}->{'binary'}' not executable")           unless -x $conf->{'rsync'}->{'binary'};
_warn("mysql binary '$conf->{'mysql'}->{'binary'}' not executable")           unless -x $conf->{'mysql'}->{'binary'};
_warn("mysqldump binary '$conf->{'mysql'}->{'mysqldump'}' not executable")    unless -x $conf->{'mysql'}->{'mysqldump'};
_warn("SSH key '$conf->{'rsync'}->{'key'}' not readable")                     unless -r $conf->{'rsync'}->{'key'};
_warn("MySQL dumpdir '$conf->{'mysql'}->{'dumpdir'}' not a directory")        unless -d $conf->{'mysql'}->{'dumpdir'};
_warn("MySQL dumpdir '$conf->{'mysql'}->{'dumpdir'}' not writeable")          unless -w $conf->{'mysql'}->{'dumpdir'};
_warn("MySQL port '$conf->{'mysql'}->{'port'}' invalid")                      unless ( ($conf->{'mysql'}->{'port'} > 0) && ($conf->{'mysql'}->{'port'} < 65535) );
_warn("Mandatory parent dir '$conf->{'rsync'}->{'parentdir'}' doesn't exist") unless -d $conf->{'rsync'}->{'parentdir'};


# Print config:
_info("General config:");
_info("\n");
_info("  rsync:");
_info("    binary:    $conf->{'rsync'}->{'binary'}");
_info("    user:      $conf->{'rsync'}->{'user'}");
_info("    key:       $conf->{'rsync'}->{'key'}");
_info("    options:   $conf->{'rsync'}->{'options'}");
_info("");
_info("  mysql:");
_info("    binary:    $conf->{'mysql'}->{'binary'}");
_info("    mysqldump: $conf->{'mysql'}->{'mysqldump'}");
_info("    port:      $conf->{'mysql'}->{'port'}");
_info("    dump dir:  $conf->{'mysql'}->{'dumpdir'}");
_info("    umask:     $conf->{'mysql'}->{'umask'}");
_info("\n");
exit(0) if exists($opts{'d'});

# Check if we're writing a script and, if so, point $fh_script at that
# file and write a shebang to it. If we're not, then point $fh_script at
# STDOUT.
my ($fh_script,$f_script);
if($f_script = $opts{'o'}){
	open($fh_script, ">", $f_script) or die "Error opening '$f_script' to write script into";
	say $fh_script startScript();
}else{
	$fh_script = \*STDOUT;
}

# Check if we're executing commands and, if we are, check that our log
# directory exists.
if (exists($opts{'e'})){
	_err("Log directory '$conf->{'logdir'}' doesn't exist") if (!-d $conf->{'logdir'});
}

# Read a list of sites to process, if supplied:
#my @sitesToProcess = getSites($opts{'l'}) if ($opts{'l'});
my %sitesToProcess = map{$_ => $_} getSites($opts{'l'}) if $opts{'l'};

foreach(keys(%$sites)){
	my $details = $sites->{$_};
	$details->{'name'} = $_;

	if(%sitesToProcess){
		next unless $sitesToProcess{$details->{'name'}};
	}
	if($opts{'s'}){
		next unless $details->{'name'} eq $opts{'s'};
	}

	my $fileSync = syncFiles($details, $conf), " > $conf->{'logdir'}/$_.rsync.stdout 2> $conf->{'logdir'}/$_.rsync.stderr";
	my $dbSync =  syncDBs($details, $conf),   " > $conf->{'logdir'}/$_.mysql.stdout 2> $conf->{'logdir'}/$_.mysql.stderr";

	if($opts{'e'}){
		system($fileSync);
		system($dbSync);
	}else{
		say $fh_script "\n\n#".$_;
		say $fh_script $fileSync;
		say $fh_script $dbSync;
	}
}

if($f_script){
	close($fh_script) or die "Error closing filehandle on script file '$f_script' : $!";
	say "Wrote script to $f_script";
}

# # # # 
# # #
# #
#

# When called with -l we'll only process sites listed
# in a file. This sub is called with that file as its
# argument and returns the list of sites found therein.
sub getSites{
	my $f_list = shift;
	my @sites;
	open(my $fh_list, "<", $f_list) or die "Error opening site list '$f_list' : $!";
	while(readline($fh_list)){
		next if /^#/;
		next if /^\s*$/;
		s/#.*$//g;
		if(/\s*(\S+)\s*/){
			push(@sites, $1);
		}
	}
	close($fh_list);
	return @sites;

}

# Returns the standard header for the generated script; a
# shebang and some info about the system it's run on.
sub startScript{
	my $script;
	my $hostname = `hostname -f`;
	chomp $hostname;
	$script = "#! /bin/bash\n\n";
	$script.= "# Written by sitemigrator at ".localtime();
	$script.= " for ".getpwuid($<)." on $hostname";
	$script.= "\n# cmdline: ". $0 ." " . $cmdline;
	$script.= "\n# pwd: ".`pwd`."\n";
	return $script;
}
# Returns the footer for the script - a newline character.
sub endScript{
	return "\n";
}

# If 'parentdir' is set, then any files transferred must be
# in a subdirectory of that dir in order to be transferred. 
# This sub checks this is the case.
sub isInMandatoryParentDir{
	my $dir = shift;
	my $parentdir = $conf->{'rsync'}->{'parentdir'};
	$parentdir =~ s#/+$##g;
	$dir =~ s#/+$##g;
	if($dir =~ m#$parentdir/(.+)#){
		return $1;
	}else{
		return;
	}

}

# Generate an rsync command.
sub syncFiles {
	my $details = shift;
	my $rsync = $_[0]->{'rsync'};
	$details->{'homedir.new'} = $details->{'homedir'} unless $details->{'homedir.new'};
	if (isInMandatoryParentDir($details->{'homedir'})){
		my $cmd = $rsync->{'binary'}." ".$rsync->{'options'}." ".$rsync->{'user'}."@".$conf->{'oldserver'}.":".$details->{'homedir'}."/* ".$details->{'homedir.new'};
		$cmd .= " > $conf->{'logdir'}/$_.rsync.stdout 2> $conf->{'logdir'}/$_.rsync.stderr";
		return $cmd;
	}else{
		my $warning = "Dir '$details->{'homedir'}' is not a subdirectory of mandatory parent directory '$rsync->{'parentdir'}'";
		_warn($warning ." when processing $details->{'name'}");
		return "# Skipping Rsync: ".$warning;
	}
}

# Generate the commands necessary to transfer the DBs. A mysqldump 
# from 'oldserver' to local disk, then an insertion of that dump
# locally.
# Returns two lines, one containing each command. 
sub syncDBs {
	my $details = shift;
	my $config = shift;
	my $mysql = $config->{'mysql'};
	unless(exists($details->{'dbname'})){
		warn("site '$details->{'name'}' has no DB, skipping DB sync");
		return;
	}

	if($details->{'dbuser'} !~ /.+/){
		$details->{'dbuser'} = $mysql->{'user'};
		$details->{'dbpass'} = $mysql->{'pass'};
	}
	if($details->{'dbhost'} !~ /.+/){
		if($mysql->{'host'} =~ /.+/){
			$details->{'dbhost'} = $mysql->{'host'};
		}else{
			$details->{'dbhost'} = $conf->{'oldserver'};
		}
	}

	# Set configured umask, and try to create a file to dump the DB into. 
	# If that fails, trigger an error and go to the next job.
	my $f_dump = $mysql->{'dumpdir'}.$details->{'name'}.".sql";
	eval{
		umask($mysql->{'umask'}) or die ("Error setting umask to '".$mysql->{'umask'}."' : $!\nSkipping DB dump.");
	};
	if($@){
		_err($@);
		next;
	}

	eval{
		open(my $fh, '>', $f_dump) or die ("Error creating dumpfile at '".$mysql->{'dumpfile'}."': $!\nSkipping DB dump");
	};
	if($@){
		_err($@);
		next;
	}
	my $c_dump = $mysql->{'mysqldump'}." -h".$details->{'dbhost'}.":".$mysql->{'port'}." -u".$details->{'dbuser'}." -p".$details->{'dbpass'}." ".$details->{'dbname'}." > ".$f_dump;
	my $c_insert = $mysql->{'binary'}." -u".$details->{'dbuser'}." -p".$details->{'dbpass'}." ".$details->{'dbname'}." < $f_dump";

	$c_dump  .="2> $conf->{'logdir'}/$_.mysqldump.stderr";
	$c_insert.="> $conf->{'logdir'}/$_.mysql.stdout 2> $conf->{'logdir'}/$_.mysql.stderr";

	return $c_dump."\n".$c_insert;
}

sub _log {
	my $message = shift;
	chomp $message;
	say $message;
}
sub _warn {
	my $message = shift;
	chomp $message;
	say STDERR "WARNING: ".$message;
}
sub _err {
	my $message = shift;
	chomp $message;
	die($message);
}

sub _info {
	return if exists($opts{'q'});
	my $message = shift;
	chomp $message;
	say "$message";
}

sub usage {
return <<EOF;
migraetsites
  a tool for migrating websites between hosts.

Usage:
  migratesites <options>

  Options:
    -c [path] path to config file. Defaults to ./sitemigrator.yaml
    -d        parse config, apply defaults, and print the resulting 
              understood settings; don't actually do anything.
    -e        execute generated commands, don't just print them.
    -h        show this help
    -l [path] path to a file containing a list of sites to sync
    -m        only do MySQL sync
    -o [path] path to output commands to (to create a script).
    -p [num]  run with this many threads. Defaults to one. NEEDS IMPLEMENTING
    -q        be quiet. Only print errors.
    -r        only do rsync 
    -s [site] only process one site

Using -m or -r wont suppress warnings that the other sync would
fail if executed.

-d is executed after any config file is read, so if you pass 
that and a config file you'll get the config from that printed, 
and some rudimentary sanity checks of it.

EOF
}
